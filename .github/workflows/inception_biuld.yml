name: Inception CI

on:
  push:
    branches: [ main ]
    paths:
      - 'srcs/**'
      - 'docker-compose.yml'
      - '.env'
      - '.github/workflows/inception_biuld.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'srcs/**'
      - 'docker-compose.yml'
      - '.env'
      - '.github/workflows/inception_biuld.yml'

concurrency:
  group: nginx-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nginx-only:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      COMPOSE_FILE: docker-compose.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set nginx
        run: |
          docker compose build mariadb nginx wordpress

      - name: Start containers
        run: |
          docker compose up -d mariadb nginx wordpress

      - name: List containers
        run: |
            docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

      - name: Aguardar MariaDB pronto (mysqladmin ping via socket)
        run: |
          set -e
          ROOT_PASS="$(docker exec mariadb printenv MYSQL_ROOT_PASSWORD 2>/dev/null || grep -E '^MYSQL_ROOT_PASSWORD=' .env | cut -d= -f2-)"
          ATTEMPTS=40
          SLEEP=3
          echo "Aguardando MariaDB (socket)..."
          for i in $(seq 1 "$ATTEMPTS"); do
            if docker exec mariadb sh -c "mysqladmin --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"${ROOT_PASS}\" ping --silent"; then
              echo "MariaDB pronto."
              exit 0
            fi
            docker compose logs --tail=5 mariadb || true
            sleep "$SLEEP"
          done
          echo "Falha: MariaDB não iniciou."
          docker compose logs mariadb || true
          exit 1

      - name: Verificar env do MariaDB
        run: |
          docker exec mariadb sh -c 'printenv | grep -E "MYSQL_(ROOT_PASSWORD|DATABASE|USER|PASSWORD)" || true'

      - name: Validar DB e usuário no MariaDB
        run: |
          set -e
          DB=$(docker exec mariadb printenv MYSQL_DATABASE 2>/dev/null || grep -E '^MYSQL_DATABASE=' .env | cut -d= -f2-)
          USER=$(docker exec mariadb printenv MYSQL_USER 2>/dev/null || grep -E '^MYSQL_USER=' .env | cut -d= -f2-)
          ROOT_PASS=$(docker exec mariadb printenv MYSQL_ROOT_PASSWORD 2>/dev/null || grep -E '^MYSQL_ROOT_PASSWORD=' .env | cut -d= -f2-)
          
          if [ -z "$DB" ] || [ -z "$USER" ] || [ -z "$ROOT_PASS" ]; then
            echo "Variáveis vazias: DB='$DB' USER='$USER' ROOT_PASS='${ROOT_PASS:+set}'"
            exit 1
          fi

          echo "Checando DB='$DB' e USER='$USER' via socket..."
          
          # Aguarda um pouco para garantir que o MariaDB terminou a inicialização
          sleep 5
          
          # Verifica se o banco existe
          echo "Verificando banco de dados..."
          if docker exec mariadb sh -c "mysql --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"$ROOT_PASS\" -N -B -e 'SHOW DATABASES LIKE \"$DB\"'" | grep -qx "$DB"; then
            echo "Banco '$DB' encontrado."
          else
            echo "ERRO: Banco '$DB' não encontrado."
            exit 1
          fi
          
          # Verifica se o usuário existe
          echo "Verificando usuário..."
          if docker exec mariadb sh -c "mysql --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"$ROOT_PASS\" -N -B -e \"SELECT User FROM mysql.user WHERE User='$USER' AND Host='%'\"" | grep -qx "$USER"; then
            echo "Usuário '$USER' encontrado."
          else
            echo "ERRO: Usuário '$USER' não encontrado."
            exit 1
          fi
          
          echo "DB e usuário OK."

      - name: Diagnóstico detalhado (se falhar validação)
        if: failure()
        run: |
          echo "=== Diagnóstico detalhado ==="
          ROOT_PASS="$(docker exec mariadb printenv MYSQL_ROOT_PASSWORD)"
          DB="$(docker exec mariadb printenv MYSQL_DATABASE)"
          USER="$(docker exec mariadb printenv MYSQL_USER)"
          
          echo "Listando todos os bancos:"
          docker exec mariadb sh -c "mysql --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"$ROOT_PASS\" -e 'SHOW DATABASES'"
          
          echo "Listando todos os usuários:"
          docker exec mariadb sh -c "mysql --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"$ROOT_PASS\" -e 'SELECT User,Host FROM mysql.user'"
          
          echo "Verificando se o banco '$DB' existe especificamente:"
          docker exec mariadb sh -c "mysql --protocol=socket --socket=/run/mysqld/mysqld.sock -uroot -p\"$ROOT_PASS\" -N -B -e 'SHOW DATABASES'" | grep "$DB" || echo "Banco não encontrado"

      - name: Aguardar php-fpm (porta 9000 no container wordpress)
        run: |
          set -e
          ATTEMPTS=10
          SLEEP=3
          echo "Aguardando php-fpm (wordpress:9000) ..."
          for i in $(seq 1 $ATTEMPTS); do
            if docker exec wordpress sh -c "ss -tlpn 2>/dev/null | grep -q ':9000'"; then
              echo "php-fpm ouvindo na porta 9000."
              exit 0
            fi
            echo "Tentativa $i/$ATTEMPTS - ainda não escutando."
            sleep $SLEEP
          done
          echo "Falha: php-fpm não escutou na porta 9000 a tempo."
          docker compose logs wordpress || true
          exit 1

      - name: Validar php-fpm config
        run: |
          set -e
          docker exec wordpress sh -c "php-fpm -t || php-fpm8.2 -t"

      - name: Testar setup do WordPress
        run: |
          set -e
          sleep 10  # Aguarda WordPress configurar
          
          # Testa se WordPress está instalado
          docker exec wordpress wp core is-installed --allow-root
          
          # Testa se usuários foram criados
          docker exec wordpress wp user list --allow-root
          
          echo "WordPress configurado com sucesso."

      - name: Test Port 443 (HTTPS)
        run: |
          set -e
          ATTEMPTS=25
          SLEEP=3
          echo "Aguardando HTTPS em https://localhost ..."
          for i in $(seq 1 $ATTEMPTS); do
            CODE=$(curl -sk -o /dev/null -w '%{http_code}' https://localhost/ || true)
            if echo "$CODE" | grep -Eq '^(200|301|302)$'; then
              echo "OK: HTTP $CODE"
              exit 0
            fi
            echo "Tentativa $i/$ATTEMPTS código=$CODE"
            docker compose ps nginx
            sleep $SLEEP
          done
          echo "FALHA: não obteve resposta aceitável."
          docker compose logs nginx || true
          docker exec nginx ss -tlpn || true
          exit 1

      - name: Verificar processo e porta dentro do container
        run: |
          docker exec nginx ss -tlpn
          docker exec nginx nginx -t

      - name: Logs (sucesso)
        if: success()
        run: docker compose logs --no-color nginx

      - name: Teardown
        if: always()
        run: docker compose down -v
